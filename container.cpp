//------------------------------------------------------------------------------
// container_Constr.cpp - содержит функции обработки контейнера
//------------------------------------------------------------------------------

#include "container.h"

//------------------------------------------------------------------------------
// Конструктор контейнера
Container::Container() : len{ 0 } { }

//------------------------------------------------------------------------------
// Деструктор контейнера
Container::~Container() {
  Clear();
}

//------------------------------------------------------------------------------
// Очистка контейнера от элементов (освобождение памяти)
void Container::Clear() {
  for (int i = 0; i < len; i++) {
    delete storage[i];
  }
  len = 0;
}

//------------------------------------------------------------------------------
// Ввод содержимого контейнера из указанного потока
void Container::In(ifstream& ifst) {
  while (!ifst.eof()) {
    if ((storage[len] = Plant::StaticIn(ifst)) != 0) {
      len++;
    }
  }
}

//------------------------------------------------------------------------------
// Случайный ввод содержимого контейнера
void Container::InRnd(int size) {
  while (len < size) {
    if ((storage[len] = Plant::StaticInRnd()) != nullptr) {
      len++;
    }
  }
}

//------------------------------------------------------------------------------
// Вывод содержимого контейнера в указанный поток
void Container::Out(ofstream& ofst) {
  ofst << "Container contains " << len << " elements.\n";
  for (int i = 0; i < len; i++) {
    ofst << i << ": ";
    storage[i]->Out(ofst);
  }
}

//------------------------------------------------------------------------------
// Вычисление суммы периметров всех фигур в контейнере
double Container::Perimeter() {
  double sum = 0.0;
  for (int i = 0; i < len; i++) {
    sum += storage[i]->Perimeter();
  }
  return sum;
}
